/*
    SPDX-FileCopyrightText: 2006, 2007 Thiago Macieira <thiago@kde.org>
    SPDX-FileCopyrightText: 2006-2008 David Faure <faure@kde.org>

    SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
*/

#include "klauncher_adaptor.h"
#include <QArgument>
#include <QByteRef>
#include <QList>
#include <QMap>
#include <QString>
#include <QStringList>
#include <QVariant>

#include "klauncher.h"

/*
 * Implementation of adaptor class KLauncherAdaptor
 *
 * This file was initially generated by dbusidl2cpp version 0.4,
 * but then modified by hand.
 */

KLauncherAdaptor::KLauncherAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KLauncherAdaptor::~KLauncherAdaptor()
{
    // destructor
}

void KLauncherAdaptor::exec_blind(const QString &name, const QStringList &arg_list)
{
    // handle method call org.kde.KLauncher.exec_blind
    static_cast<KLauncher *>(parent())->exec_blind(name, arg_list);
}

void KLauncherAdaptor::exec_blind(const QString &name, const QStringList &arg_list, const QStringList &envs, const QString &startup_id)
{
    // handle method call org.kde.KLauncher.exec_blind
    static_cast<KLauncher *>(parent())->exec_blind(name, arg_list, envs, startup_id);
}

int KLauncherAdaptor::kdeinit_exec(const QString &app, const QStringList &args, const QStringList &env, const QString &startup_id, const QDBusMessage &msg, QString &, QString &, int &)
{
    // handle method call org.kde.KLauncher.kdeinit_exec
    static_cast<KLauncher *>(parent())->kdeinit_exec(app, args, QString(), env, startup_id, false, msg);
    return 0;                   // delayed reply
}

int KLauncherAdaptor::kdeinit_exec_wait(const QString &app, const QStringList &args, const QStringList &env, const QString &startup_id, const QDBusMessage &msg, QString &, QString &, int &)
{
    // handle method call org.kde.KLauncher.kdeinit_exec_wait
    static_cast<KLauncher *>(parent())->kdeinit_exec(app, args, QString(), env, startup_id, true, msg);
    return 0;                   // delayed reply
}

int KLauncherAdaptor::kdeinit_exec_with_workdir(const QString &app, const QStringList &args, const QString &workdir, const QStringList &env, const QString &startup_id, const QDBusMessage &msg, QString &, QString &, int &)
{
    // handle method call org.kde.KLauncher.kdeinit_exec_with_workdir
    static_cast<KLauncher *>(parent())->kdeinit_exec(app, args, workdir, env, startup_id, false, msg);
    return 0;                   // delayed reply
}

void KLauncherAdaptor::reparseConfiguration()
{
    // handle method call org.kde.KLauncher.reparseConfiguration
    static_cast<KLauncher *>(parent())->reparseConfiguration();
}

void KLauncherAdaptor::setLaunchEnv(const QString &name, const QString &value)
{
    // handle method call org.kde.KLauncher.setLaunchEnv
    static_cast<KLauncher *>(parent())->setLaunchEnv(name, value);
}

int KLauncherAdaptor::start_service_by_desktop_name(const QString &serviceName, const QStringList &urls, const QStringList &envs, const QString &startup_id, bool blind, const QDBusMessage &msg, QString &dbusServiceName, QString &error, int &pid)
{
    // handle method call org.kde.KLauncher.start_service_by_desktop_name
    KLauncher *p = static_cast<KLauncher *>(parent());
    p->start_service_by_desktop_name(serviceName, urls, envs, startup_id, blind, msg);
    dbusServiceName = p->requestResult.dbusName;
    error = p->requestResult.error;
    pid = p->requestResult.pid;
    return p->requestResult.result;
}

int KLauncherAdaptor::start_service_by_desktop_path(const QString &serviceName, const QStringList &urls, const QStringList &envs, const QString &startup_id, bool blind, const QDBusMessage &msg, QString &dbusServiceName, QString &error, int &pid)
{
    // handle method call org.kde.KLauncher.start_service_by_desktop_path
    KLauncher *p = static_cast<KLauncher *>(parent());
    p->start_service_by_desktop_path(serviceName, urls, envs, startup_id, blind, msg);
    dbusServiceName = p->requestResult.dbusName;
    error = p->requestResult.error;
    pid = p->requestResult.pid;
    return p->requestResult.result;
}

void KLauncherAdaptor::terminate_kdeinit()
{
    KLauncher *p = static_cast<KLauncher *>(parent());
    p->terminate_kdeinit();
}

